on:
  push:
    branches: [ deploy ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'

  pull_request:
    branches: [ main ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
  TF_STATE_backend_storage_container: ${{ secrets.TF_STATE_BACKEND_STORAGE_CONTAINER }}
  TF_STATE_backend_storage_account: ${{ secrets.TF_STATE_BACKEND_STORAGE_ACCOUNT }}
  TF_STATE_backend_resource_group: ${{ secrets.TF_STATE_BACKEND_RESOURCE_GROUP }}
  TF_IN_AUTOMATION: true
  TF_INPUT: 0
  TF_WORKSPACE: priority

name: ci-priority

jobs:
  deploy:
    environment: priority
    defaults:
      run:
        working-directory: scripts
    name: deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Use Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: false

    - name: Use Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.3
        terraform_wrapper: false

    - name: Prepare environment variables
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      run: | 
        # Parse Azure secret into Terraform variables
        $servicePrincipal = ($env:AZURE_CREDENTIALS | ConvertFrom-Json)
        $env:ARM_CLIENT_ID = $servicePrincipal.clientId
        $env:ARM_CLIENT_SECRET = $servicePrincipal.clientSecret
        $env:ARM_SUBSCRIPTION_ID = $servicePrincipal.subscriptionId
        $env:ARM_TENANT_ID = $servicePrincipal.tenantId

        $env:TF_VAR_run_id=$env:GITHUB_RUN_ID
        # We may not be able to create a Service Principal with a Service Principal, reuse Terraform SP for Logic App:
        $env:TF_VAR_workflow_sp_application_id = $servicePrincipal.clientId
        $env:TF_VAR_workflow_sp_application_secret = $servicePrincipal.clientSecret
        $env:TF_VAR_workflow_sp_object_id = $servicePrincipal.objectId
        
        # List environment variables
        Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,GITHUB_*,TF_* | Sort-Object -Property Name
        # Save environment variable setup for subsequent steps
        Get-ChildItem -Path Env: -Recurse -Include ARM_*,TF_VAR_* | ForEach-Object {Write-Output "$($_.Name)=$($_.Value)"} >> $env:GITHUB_ENV
      shell: pwsh

    - name: Terraform Init & Plan
      run: ./deploy.ps1 -Init -Plan
      shell: pwsh
        
    - name: Use Node.js
      uses: actions/setup-node@v1

    - name: Install Azure Functions Core Tools
      run: 
        npm i -g azure-functions-core-tools@3 --unsafe-perm true
        
    - name: Terraform Apply
      id: terraform-apply
      run: ./deploy.ps1 -Apply -Force -NoCode
      shell: pwsh

    - name: Deploy Azure Function
      run: ./deploy_functions.ps1
      shell: pwsh

    - name: Test connection to Minecraft Server
      run: | 
        Set-Location (Join-Path $env:GITHUB_WORKSPACE terraform) # Task does not support 'working-directory' property
        $minecraftConfig  = (terraform output -json minecraft | ConvertFrom-Json -AsHashtable)
        foreach ($minecraftConfigName in $minecraftConfig.Keys) {
          Write-Host "Processing configuration '{$minecraftConfigName}''..."
          $containerGroupID = $minecraftConfig[$minecraftConfigName].container_group_id
          $serverFQDN       = $minecraftConfig[$minecraftConfigName].minecraft_server_fqdn
          $serverPort       = $minecraftConfig[$minecraftConfigName].minecraft_server_port

          # Wait for Minecraft socket to open
          $connectionAttempts = 0
          do {
            Start-Sleep -Seconds 10
            Write-Host "Pinging ${serverFQDN} on port ${serverPort}..."
            try {
              $connectionAttempts++
              $mineCraftConnection = New-Object System.Net.Sockets.TcpClient($serverFQDN, $serverPort) -ErrorAction SilentlyContinue
            } catch [System.Management.Automation.MethodInvocationException] {
              Write-Warning $_
            }
          } while ((!$mineCraftConnection || !$mineCraftConnection.Connected) -and ($connectionAttempts -le 10))
          # az container exec --ids $containerGroupID --exec-command "/health.sh" --container-name minecraft
          
          az container show --ids $containerGroupID --query instanceView
          az container logs --ids $containerGroupID
        }
      shell: pwsh
